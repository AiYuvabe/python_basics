# -*- coding: utf-8 -*-
"""0_Welcome_to_AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bAWR50OsEnIYSyWuWSwhW0lzhGtcxbWo

#Problem Statement
Given a number, determine if it is odd or even:

## 1. Traditional programming approach
Use rules explicitly defined by the programmer.

- Start

- Input a Number:

- Check Divisibility by 2

- The program calculates the remainder when the input number is divided by 2.

- If the remainder is 0, input number is indentified as **even**, else the input number is identified as **odd**
- The program displays whether the number is "Odd" or "Even."

- End
"""

# Traditional Programming Approach
def is_odd_or_even(number):
    if number % 2 == 0:
        return "Even"
    else:
        return "Odd"

# Test the function
for num in range(8, 10):  # Test numbers from 1 to 5
    print(f"Number: {num}, Result: {is_odd_or_even(num)}")

# Traditional Programming Approach
def is_odd_or_even(number):
    if number % 2 == 0:
        return "Even"
    else:
        return "Odd"

number = input("Please enter a positive integer: ")

number = int(number)

print(is_odd_or_even(number))

"""## 2. Machine Learning Approach

Here, instead of explicitly defining the rules, we use data to let the machine figure out the pattern.

Steps:

- Generate a dataset of numbers and their labels (odd or even).
- Train the model to find a pattern.
- Predict the label for new numbers.

Here’s a simple implementation of a machine learning approach without any libraries:

"""

# Machine Learning Approach (Corrected)

# Step 1: Generate Dataset
data = [(i, 1 if i % 2 == 0 else 0) for i in range(1, 11)]  # (number, label: 1 for even, 0 for odd)

print(data)
# Step 2: Learn a pattern (simple threshold-based)
def train(data):
    even_sum = sum(label for _, label in data)  # Sum of all "even" labels (1s)
    threshold = even_sum / len(data)  # Normalize: Fraction of even numbers in the dataset
    return threshold

# Step 3: Predict (Using a learned threshold)
def predict(number, threshold):
    # Calculate a "score" for evenness
    score = 1 if number % 2 == 0 else 0

    # Use the threshold to predict
    return "Even" if score >= threshold else "Odd"

# Train the model
threshold = train(data)

print("threshold", threshold)
# Test the "model"
for num in range(20, 25):  # Test numbers from 1 to 5
    print(f"Number: {num}, Result: {predict(num, threshold)}")

"""# Problem Statement
We have the linear equation:

```
y=2x+3
```
Task: Find the value of ```y``` for given values of ```x```.

## 1. Traditional Programming Approach
In traditional programming, we solve the equation by explicitly using the formula  ```y=2x+3```

**Code:**
"""

# Traditional Programming Approach
def calculate_y(x):
    return 2* x + 3

# Test the function
for x in range(1, 6):  # Test for x = 1 to 5
    print(f"x: {x}, y: {calculate_y(x)}")

"""## 2. Machine Learning Approach
In the ML approach, we won’t explicitly use the formula  ```y=2x+3```
Instead, we’ll let the machine learn the relationship between
x and y from data.

Steps:
- Generate a Dataset:
  - Use x values and calculate y using the formula.
  - This will act as our "training data."

- Train the Model:

  - Use simple linear regression to find the slope (m) and intercept (b) such that:
y=mx+b

- Predict:

  - Use the learned m and b to predict y for new x values.


"""

# Machine Learning Approach

# Step 1: Generate Dataset
data = [(x, 2 * x + 3) for x in range(1, 11)]  # Generate data for x=1 to 10

# Step 2: Train the Model (Find slope and intercept)
def train(data):
    n = len(data)
    sum_x = sum(x for x, y in data)
    sum_y = sum(y for x, y in data)
    sum_xy = sum(x * y for x, y in data)
    sum_x_squared = sum(x ** 2 for x, y in data)

    # Calculate slope (m) and intercept (b)
    m = (n * sum_xy - sum_x * sum_y) / (n * sum_x_squared - sum_x ** 2)
    b = (sum_y - m * sum_x) / n

    return m, b

# Step 3: Predict Using the Model
def predict(x, m, b):
    return m * x + b

# Train the model
m, b = train(data)
print(f"Trained Model: y = {m}x + {b}")

# Test the model
for x in range(1, 6):  # Test for x = 1 to 5
    print(f"x: {x}, y: {predict(x, m, b)}")

"""##Examples of where AI is been used.
###Finance
- Fraud Detection: Banks employ AI to monitor transactions and identify fraudulent activities in real-time.

###Customer Service
- AI-powered chatbots handle customer inquiries, providing 24/7 assistance and reducing wait times.

###Healthcare

- Medical Imaging: AI algorithms assist in diagnosing diseases by analyzing medical images such as X-rays and MRIs.

- Drug Discovery: AI accelerates the process of finding new medications by predicting molecular interactions.

###Transportation

- Autonomous Vehicles: Companies like Tesla develop self-driving cars that utilize AI for navigation and obstacle detection.

- Traffic Management: AI systems analyze traffic patterns to optimize signal timings and reduce congestion.

###Entertainment
- Content Recommendations: Streaming services like Netflix and Spotify use AI to curate personalized content playlists.
- Game Development: AI creates responsive and intelligent behaviors in non-player characters (NPCs).
Agriculture

###Crop Monitoring
- AI-powered drones assess crop health and identify areas needing attention.
- AI forecasts weather patterns and pest infestations, aiding in proactive farm management."

"""